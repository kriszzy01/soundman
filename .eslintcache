[{"C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\index.tsx":"1","C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\utils\\index.ts":"2","C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\utils\\data.ts":"3","C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\components\\player.tsx":"4","C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\components\\Player.tsx":"5","C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\App.tsx":"6","C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\utils\\helpers.ts":"7","C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\components\\ToggleButton.tsx":"8"},{"size":165,"mtime":1610994385186,"results":"9","hashOfConfig":"10"},{"size":53,"mtime":1611044891706,"results":"11","hashOfConfig":"10"},{"size":4215,"mtime":1610995078708,"results":"12","hashOfConfig":"10"},{"size":594,"mtime":1611000869121,"results":"13","hashOfConfig":"10"},{"size":3625,"mtime":1611262892622,"results":"14","hashOfConfig":"10"},{"size":3207,"mtime":1611261948574,"results":"15","hashOfConfig":"10"},{"size":294,"mtime":1611134832305,"results":"16","hashOfConfig":"10"},{"size":912,"mtime":1611262789057,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"jblg0x",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\index.tsx",[],["37","38"],"C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\utils\\index.ts",[],"C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\utils\\data.ts",[],"C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\components\\player.tsx",[],"C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\components\\Player.tsx",["39"],"import React from \"react\";\r\nimport { Song } from \"../types\";\r\nimport { data } from \"../utils\";\r\n\r\nimport { ReactComponent as Pause } from \"../assets/pause.svg\";\r\nimport { ReactComponent as Play } from \"../assets/play.svg\";\r\nimport { ReactComponent as Next } from \"../assets/next.svg\";\r\nimport { ReactComponent as Prev } from \"../assets/prev.svg\";\r\n\r\nimport { getPercentage, getSeconds } from \"../utils\";\r\n\r\ntype SongInfo = {\r\n  currentTime: number;\r\n  duration: number;\r\n};\r\n\r\ninterface PlayerProps {\r\n  audioRef: React.RefObject<HTMLAudioElement>;\r\n  isPlaying: boolean;\r\n  setIsPlaying: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setSongInfo: React.Dispatch<React.SetStateAction<SongInfo>>;\r\n  setNowPlaying: React.Dispatch<React.SetStateAction<Song>>;\r\n  nowPlaying: Song;\r\n  currentSongId: string;\r\n  songInfo: SongInfo;\r\n}\r\n\r\nexport const Player: React.FC<PlayerProps> = ({\r\n  audioRef,\r\n  isPlaying,\r\n  setIsPlaying,\r\n  songInfo,\r\n  setSongInfo,\r\n  setNowPlaying,\r\n  currentSongId,\r\n  nowPlaying,\r\n}) => {\r\n  const handlePlayPause = () => {\r\n    setIsPlaying(!isPlaying);\r\n    isPlaying ? audioRef.current?.pause() : audioRef.current?.play();\r\n  };\r\n\r\n  const handleSliderDrag = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSongInfo({\r\n      ...songInfo,\r\n      currentTime: +event.target.value,\r\n    });\r\n\r\n    if (audioRef.current) {\r\n      audioRef.current.currentTime = +event.target.value;\r\n    }\r\n  };\r\n\r\n  const handleChangeSong = async (direction: string) => {\r\n    let id = data.findIndex((data) => data.id === currentSongId);\r\n\r\n    if (direction === \"next\") {\r\n      let nextSong = data[(id + 1) % data.length];\r\n      await setNowPlaying(nextSong);\r\n    } else if (direction === \"prev\") {\r\n      let prevSong = data[(id - 1) % data.length] || data[data.length - 1];\r\n      await setNowPlaying(prevSong);\r\n    }\r\n\r\n    if (isPlaying) audioRef.current?.play();\r\n  };\r\n\r\n  const handleShuffleSong = () => {};\r\n\r\n  const { currentTime, duration } = songInfo;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"player__nowPlaying\">\r\n        <img\r\n          src={nowPlaying.cover}\r\n          alt={nowPlaying.alt}\r\n          className={isPlaying ? \"playing\" : \"\"}\r\n        />\r\n        <h2>{nowPlaying.name}</h2>\r\n        <h3>{nowPlaying.artist}</h3>\r\n      </div>\r\n\r\n      <div className=\"player__indicator\">\r\n        <span>{getSeconds(currentTime)}</span>\r\n\r\n        <div data-type=\"range\">\r\n          <label className=\"vh\" htmlFor=\"range\">\r\n            Song Progress\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"range\"\r\n            min=\"0\"\r\n            max={duration}\r\n            value={currentTime}\r\n            list=\"none\"\r\n            onChange={handleSliderDrag}\r\n          />\r\n          <div\r\n            style={{\r\n              transform: `translateX(${getPercentage(currentTime, duration)}%)`,\r\n            }}\r\n          ></div>\r\n        </div>\r\n\r\n        <span>{getSeconds(duration)}</span>\r\n      </div>\r\n\r\n      <div className=\"player__controls\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => handleChangeSong(\"prev\")}\r\n          aria-label=\"Previous Music\"\r\n        >\r\n          <Prev />\r\n        </button>\r\n\r\n        <button type=\"button\" onClick={handlePlayPause}>\r\n          {isPlaying ? <Pause /> : <Play />}\r\n          <span className=\"vh\">{isPlaying ? \"Pause Music\" : \"Play Music\"}</span>\r\n        </button>\r\n\r\n        <button\r\n          type=\"button\"\r\n          aria-label=\"Next Music\"\r\n          onClick={() => handleChangeSong(\"next\")}\r\n        >\r\n          <Next />\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\App.tsx",[],"C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\utils\\helpers.ts",[],["40","41"],"C:\\Users\\Christian Otu\\Documents\\Repositories\\soundman\\src\\components\\ToggleButton.tsx",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":68,"column":9,"nodeType":"48","messageId":"49","endLine":68,"endColumn":26},{"ruleId":"42","replacedBy":"50"},{"ruleId":"44","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"@typescript-eslint/no-unused-vars","'handleShuffleSong' is assigned a value but never used.","Identifier","unusedVar",["52"],["53"],"no-global-assign","no-unsafe-negation"]